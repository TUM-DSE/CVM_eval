diff --git a/arch/x86/kernel/sev-shared.c b/arch/x86/kernel/sev-shared.c
index ccb0915e84e1..b75d20e839db 100644
--- a/arch/x86/kernel/sev-shared.c
+++ b/arch/x86/kernel/sev-shared.c
@@ -222,7 +222,7 @@ static enum es_result verify_exception_info(struct ghcb *ghcb, struct es_em_ctxt
 	return ES_VMM_ERROR;
 }
 
-static enum es_result sev_es_ghcb_hv_call(struct ghcb *ghcb,
+enum es_result sev_es_ghcb_hv_call(struct ghcb *ghcb,
 					  struct es_em_ctxt *ctxt,
 					  u64 exit_code, u64 exit_info_1,
 					  u64 exit_info_2)
@@ -240,6 +240,7 @@ static enum es_result sev_es_ghcb_hv_call(struct ghcb *ghcb,
 
 	return verify_exception_info(ghcb, ctxt);
 }
+EXPORT_SYMBOL_GPL(sev_es_ghcb_hv_call);
 
 static int __sev_cpuid_hv(u32 fn, int reg_idx, u32 *reg)
 {
diff --git a/arch/x86/kernel/sev.c b/arch/x86/kernel/sev.c
index c67285824e82..60a2048e9644 100644
--- a/arch/x86/kernel/sev.c
+++ b/arch/x86/kernel/sev.c
@@ -211,7 +211,7 @@ void noinstr __sev_es_ist_exit(void)
  *
  * Callers must disable local interrupts around it.
  */
-static noinstr struct ghcb *__sev_get_ghcb(struct ghcb_state *state)
+noinstr struct ghcb *__sev_get_ghcb(struct ghcb_state *state)
 {
 	struct sev_es_runtime_data *data;
 	struct ghcb *ghcb;
@@ -253,6 +253,7 @@ static noinstr struct ghcb *__sev_get_ghcb(struct ghcb_state *state)
 
 	return ghcb;
 }
+EXPORT_SYMBOL_GPL(__sev_get_ghcb);
 
 static inline u64 sev_es_rd_ghcb_msr(void)
 {
@@ -554,7 +555,7 @@ static enum es_result vc_ioio_check(struct es_em_ctxt *ctxt, u16 port, size_t si
 /* Include code shared with pre-decompression boot stage */
 #include "sev-shared.c"
 
-static noinstr void __sev_put_ghcb(struct ghcb_state *state)
+noinstr void __sev_put_ghcb(struct ghcb_state *state)
 {
 	struct sev_es_runtime_data *data;
 	struct ghcb *ghcb;
@@ -578,6 +579,7 @@ static noinstr void __sev_put_ghcb(struct ghcb_state *state)
 		data->ghcb_active = false;
 	}
 }
+EXPORT_SYMBOL_GPL(__sev_put_ghcb);
 
 void noinstr __sev_es_nmi_complete(void)
 {
